#include<iostream>
#include<Windows.h>

using namespace std;

template <typename T>
class List {

public:
    List();//конструктор
    ~List();

    void push_back(T data);
    void print();
    bool findClone(List *lst_2);//что не так
    int getSize() { return size; };

    T& operator[] (const int index);

private:

    template<typename T>
    class Node
    {
    public:
        Node* pNext;
        T data;

        Node(T data = 0, Node* pNext = NULL)
        {
            this->data = data;
            this->pNext = pNext;
        }

    };
    int size;
    Node<T>* head;

};


template <typename T> List<T>::List()
{
    size = 0;
    head = nullptr;
}


template <typename T>
List<T>::~List()
{
    while (head != NULL)
    {
        Node<T>* temp = head->pNext;
        delete head;
        head = temp;
    }
}

template<typename T> void List<T>::push_back(T data)
{
    if (!head) {
        head = new Node<T>(data);
    }

    else {
        Node<T>* current = this->head;

        while (current->pNext != nullptr) {
            current = current->pNext;
        }
        current->pNext = new Node<T>(data);
    }
    size++;
}


template<typename T> void List<T>::print()
{
    Node<T>* current = this->head;

    while (current != nullptr)
    {
        cout << current->data << " ";
        current = current->pNext;
    }
}


template<typename T> bool List<T>::findClone(List *lst_2)
{
    Node<T>* el = head;
    Node<T>* elarg = lst_2->head;

    while (el && elarg) {
        if (el->data == elarg->data) {
            elarg = elarg->pNext;
        }
        el = el->pNext;
    }
    return elarg == NULL;
}





int main() {
    setlocale(LC_ALL, "ru");

    List<int> lst_1;
    List<int> lst_2;

    int N_1, N_2;//chislo el spiska
    int el_1, el_2;//elements vvodimie v spisok

    cout << "Введите длину 1-го списка: ";
    cin >> N_1;
    for (int i = 0; i < N_1; i++) {
        cout << i + 1 << " = ";
        cin >> el_1;
        lst_1.push_back(el_1);
    }

    cout << "Введите длину 2-го списка: ";
    cin >> N_2;
    for (int i = 0; i < N_2; i++) {
        cout << i + 1 << " = ";
        cin >> el_2;
        lst_2.push_back(el_2);
    }
    cout << "------------\n";

    lst_1.print();
    cout << "\n";
    lst_2.print();
    cout << "\n";
    cout << "------------\n";

    cout << "Список 1 " << (lst_2.findClone(&lst_1) ? "" : "НЕ ") << "содержится в списке 2" << endl;


    return 0;
}
